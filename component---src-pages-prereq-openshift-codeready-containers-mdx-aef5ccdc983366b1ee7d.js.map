{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack:///./src/pages/prereq/openshift/codeready-containers.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss"],"names":["PageHeader","title","tabs","className","cx","pageHeader","withTabs","length","id","text","EditLink","relativePagePath","repositoryProp","repository","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","props","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","list","React","Component","Default","pageContext","children","location","Title","frontmatter","titleType","theme","description","keywords","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils","module","exports","_frontmatter","makeShortcode","name","console","warn","InlineNotification","Tabs","Tab","Row","Column","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-prereq-openshift-codeready-containers-mdx-aef5ccdc983366b1ee7d.js","sourcesContent":["import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { pageHeader, withTabs, text } from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, tabs = [] }) => (\n  <div className={cx(pageHeader, { [withTabs]: tabs.length })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const { tabs, title, theme, description, keywords } = frontmatter;\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader title={Title ? <Title /> : title} label=\"label\" tabs={tabs} />\n      {tabs && <PageTabs slug={slug} tabs={tabs} currentTab={currentTab} />}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"EditLink-module--bx--text-truncate--end--2pqje\",\"bxTextTruncateFront\":\"EditLink-module--bx--text-truncate--front--3_lIE\",\"link\":\"EditLink-module--link--1qzW3\",\"row\":\"EditLink-module--row--1B9Gk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageTabs-module--bx--text-truncate--end--267NA\",\"bxTextTruncateFront\":\"PageTabs-module--bx--text-truncate--front--3xEQF\",\"tabsContainer\":\"PageTabs-module--tabs-container--8N4k0\",\"list\":\"PageTabs-module--list--3eFQc\",\"listItem\":\"PageTabs-module--list-item--nUmtD\",\"link\":\"PageTabs-module--link--1mDJ1\",\"selectedItem\":\"PageTabs-module--selected-item--YPVr3\"};","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM/spm-kubernetes/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst Tabs = makeShortcode(\"Tabs\");\nconst Tab = makeShortcode(\"Tab\");\nconst Row = makeShortcode(\"Row\");\nconst Column = makeShortcode(\"Column\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`What is CRC?`}</h2>\n    <p>{`CodeReady Containers (CRC) is a minimal, preconfigured OpenShift 4.1 or newer cluster that is designed to run on your local workstation as a development environment for OpenShift.\nFor more information, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/code-ready/crc\"\n      }}>{`CodeReady Containers`}</a>{`.`}</p>\n    <p>{`Similar to Minikube in concept, CRC provides a cloud like environment locally to create and deploy an OpenShift cluster for development and testing purposes.`}</p>\n    <p>{`This page covers some common CRC operations, including deploying IBM® Cúram Social Program Management (SPM) to the CRC environment. You will use the helm charts produced in `}<a parentName=\"p\" {...{\n        \"href\": \"/spm-kubernetes/deployment/hc_deployment\"\n      }}>{`Preparing Helm charts`}</a>{`.`}</p>\n    <p>{`For a full getting started guide for CRC, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://access.redhat.com/documentation/en-us/red_hat_codeready_containers/1.8/html/getting_started_guide/index\"\n      }}>{`Getting Started Guide CodeReady Containers`}</a></p>\n    <h3>{`Minimum System requirements`}</h3>\n    <p>{`CodeReady Containers system requirements can be found here: `}<a parentName=\"p\" {...{\n        \"href\": \"https://code-ready.github.io/crc/#minimum-system-requirements_gsg\"\n      }}>{`CRC Minimum system requirements`}</a>{`.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`There is a know CRC `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/code-ready/crc/issues/557\"\n        }}>{`issue`}</a>{` with respect to resource usage. When deploying SPM on CRC our experience has shown that a minimum of 16GB will improve performance, however 32GB is optimal.`}</p>\n    </InlineNotification>\n    <h2>{`Installing CRC`}</h2>\n    <p>{`Create an account at `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.redhat.com/\"\n      }}>{`RedHat Cloud`}</a>{`.\nCreate a `}<inlineCode parentName=\"p\">{`$CRC_HOME`}</inlineCode>{` folder to use for the purposes of the installation.\nDownload the installation archive from `}<a parentName=\"p\" {...{\n        \"href\": \"https://cloud.redhat.com/openshift/install/crc/installer-provisioned\"\n      }}>{`latest release`}</a>{` to `}<inlineCode parentName=\"p\">{`$CRC_HOME`}</inlineCode>{` and extract the archive.\nOn the same page, download your pull secret to `}<inlineCode parentName=\"p\">{`$CRC_HOME`}</inlineCode>{`. At the time of writing the `}<inlineCode parentName=\"p\">{`latest release`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`1.13.0`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`tar -xvf crc-macos-amd64.tar.xz\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{`  You have two options, add the binary to the `}<inlineCode parentName=\"p\">{`PATH`}</inlineCode>{` environment variable, or move it to `}<inlineCode parentName=\"p\">{`/usr/local/bin/`}</inlineCode>{`.`}</p>\n    </InlineNotification>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Add to the PATH\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`export PATH=$CRC_HOME/crc-macos-1.10.0-amd64:$PATH\\`\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"/usr/bin/local \" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`mv $CRC_HOME/crc-macos-1.10.0-amd64/crc /usr/local/bin\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <p>{`Whichever option you choose, you should now have crc in your executable path, to test this run the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc version\n`}</code></pre>\n    <p>{`The output should be similar to the following:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`crc version: 1.10.0+9025021\nOpenShift version: 4.4.3 (embedded in binary)\n`}</code></pre>\n    <h2>{`Setting up CRC`}</h2>\n    <p>{`The first step is to configure the prerequisites for the OpenShift cluster, including taking control of your hosts and resolver files to provide access to the CRC cluster.\nTo do this run the following command, providing the workstation administrator password as required.\nThis procedure also creates the ~/.crc directory if it does not already exist.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc setup\n`}</code></pre>\n    <p>{`Now that the basic configuration is complete, you need to edit the configuration to change the memory limit and add the path to the pull secret file downloaded previously.`}</p>\n    <p>{`To change the memory limit, set the CPUs to 6, and add the path to the pull secret file downloaded previously. Run the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc config set memory 32768\ncrc config set cpus 6\ncrc config set pull-secret-file $CRC_HOME/pull-secret.txt\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{`  While CRC’s minimum memory allocation requirement is 8GB, only a single replica SPM deployment can be achieved using this.`}</p>\n      <p>{`You should allocate as many resources as are available.`}</p>\n      <p>{`The greater the workload the greater the memory and processor requirements.`}</p>\n      <p>{`Any changes to the crc config require you to delete the cluster and start a new one.`}</p>\n    </InlineNotification>\n    <p>{`You can always check the configured options of ’crc’, run the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc config view\n`}</code></pre>\n    <p>{`After setup is complete, start the cluster with 6 CPUs, run the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc start\n`}</code></pre>\n    <p>{`This outputs something similar to the following:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`level=info msg=\"Checking if oc binary is cached\"\n...\n...\n...\nlevel=info msg=\"To access the cluster, first set up your environment by following 'crc oc-env' instructions\"\nlevel=info msg=\"Then you can access it by running 'oc login -u developer -p developer https://api.crc.testing:6443'\"\nlevel=info msg=\"To login as an admin, run 'oc login -u kubeadmin -p YourPassWordHere https://api.crc.testing:6443'\"\n...\n...\n`}</code></pre>\n    <p>{`Note the `}<inlineCode parentName=\"p\">{`kubeadmin`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`developer`}</inlineCode>{` credentials for later use.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{`  For the rest of the guide you can substitute the credentials you received when you started your cluster for `}<inlineCode parentName=\"p\">{`$KUBEADMN_PSWD`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`$KUBEDEVEL_PSWD`}</inlineCode>{`.`}</p>\n      <p>{`Alternatively, these credentials are returned by the `}<inlineCode parentName=\"p\">{`crc console --credentials`}</inlineCode>{` command.\nThis guide uses `}<inlineCode parentName=\"p\">{`$KUBEDEVEL_PSWD`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`$KUBEADMN_PSWD`}</inlineCode>{` environment variables.`}</p>\n      <p>{`You may find it convenient to to the same, so you can copy and paste commands without having to switch values:`}</p>\n      <p><inlineCode parentName=\"p\">{`export KUBEADMN_PSWD=yourKubeAdminPassword`}</inlineCode></p>\n      <p><inlineCode parentName=\"p\">{`export KUBEDEVEL_PSWD=yourKubeDeveloperPassword`}</inlineCode></p>\n    </InlineNotification>\n    <p>{`Next, set up the OpenShift Client `}<inlineCode parentName=\"p\">{`oc`}</inlineCode>{`, which is used to administer the CRC cluster:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc oc-env\neval $(crc oc-env)\n`}</code></pre>\n    <p>{`If required you can stop the cluster:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc stop\n`}</code></pre>\n    <p>{`Or delete the cluster:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc delete\n`}</code></pre>\n    <h2>{`Creating a CRC project`}</h2>\n    <p>{`Create a project for the SPM deployment, again use an environment variable for your convenience when following the guide.`}</p>\n    <p>{`Create the environment variable, you can set to value to anything you like, but it should consist of lower case alphanumeric characters or `}<inlineCode parentName=\"p\">{`-`}</inlineCode>{`, and must start and end with an alphanumeric character (e.g. `}<inlineCode parentName=\"p\">{`my-name`}</inlineCode>{`,  or `}<inlineCode parentName=\"p\">{`123-abc`}</inlineCode>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`export PROJECT=\"ocp\"\n`}</code></pre>\n    <p>{`Log in as kubeadmin:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`oc login -u kubeadmin -p $KUBEADMN_PSWD https://api.crc.testing:6443\n`}</code></pre>\n    <p>{`Create the project:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`oc adm new-project $PROJECT\n`}</code></pre>\n    <p>{`Switch kubernetes context to the new project:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`kubectl config set-context --current --namespace $PROJECT\n`}</code></pre>\n    <h2>{`Deployment Process`}</h2>\n    <p>{`Enable the Image Registry default route:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`oc patch configs.imageregistry.operator.openshift.io/cluster --type merge -p '{\"spec\":{\"defaultRoute\":true}}'\n\n`}</code></pre>\n    <p>{`Add relevant roles to user:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`oc adm policy add-cluster-role-to-user registry-viewer kube:admin\n`}</code></pre>\n    <p>{`Log in to the OpenShift registry:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`docker login -u kubeadmin -p $(oc whoami -t) $(oc registry info --public)\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><inlineCode parentName=\"p\">{`oc registry info --public`}</inlineCode>{` should return a URL like `}<inlineCode parentName=\"p\">{`default-route-openshift-image-registry.apps-crc.testing`}</inlineCode>{` which is used for publishing images into the internal image registry.`}</p>\n      <p>{`The image registry URL for use in Helm override values can be retrieved using `}<inlineCode parentName=\"p\">{`oc registry info --internal`}</inlineCode>{`: `}<inlineCode parentName=\"p\">{`image-registry.openshift-image-registry.svc:5000`}</inlineCode></p>\n    </InlineNotification>\n    <h2>{`Hostname configuration for CRC`}</h2>\n    <p>{`This runbook uses a generic hostname of `}<inlineCode parentName=\"p\">{`spm-ocp.apps-crc.testing`}</inlineCode>{` as an example in commands and the configuration files.\nYou should add the CRC IP address to the `}<inlineCode parentName=\"p\">{`hosts`}</inlineCode>{` file by using the generic hostname, or else modify the usage of `}<inlineCode parentName=\"p\">{`spm-ocp.apps-crc.testing`}</inlineCode>{` in this runbook to reflect your local hostname.`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Mac/Linux\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`echo -e \"$(crc ip)\\\\tspm-ocp.apps-crc.testing\" | sudo tee -a /etc/hosts\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Windows\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`Add-Content -Path C:\\\\Windows\\\\System32\\\\drivers\\\\etc\\\\hosts -Value \"$(crc ip)\\\\tspm-ocp.apps-crc.testing\" -Force\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <p>{`Where `}<inlineCode parentName=\"p\">{`crc ip`}</inlineCode>{` is the command that returns the CRC VM’s IP address that is accessible from your workstation.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageHeader-module--bx--text-truncate--end--mZWeX\",\"bxTextTruncateFront\":\"PageHeader-module--bx--text-truncate--front--3zvrI\",\"pageHeader\":\"PageHeader-module--page-header--3hIan\",\"withTabs\":\"PageHeader-module--with-tabs--3nKxA\",\"text\":\"PageHeader-module--text--o9LFq\"};"],"sourceRoot":""}