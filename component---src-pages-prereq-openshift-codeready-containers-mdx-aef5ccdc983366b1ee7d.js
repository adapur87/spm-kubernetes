(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{"013z":function(e,t,n){"use strict";var a=n("WcmB"),c=n("q1tI"),r=n.n(c),o=n("NmYn"),l=n.n(o),i=n("Xrax"),s=n("k4MR"),b=n("TSYQ"),p=n.n(b),u=n("QH2O"),d=n("qKvR"),m=function(e){var t,n=e.title,a=e.tabs,c=void 0===a?[]:a;return Object(d.b)("div",{className:p()(u.pageHeader,(t={},t[u.withTabs]=c.length,t))},Object(d.b)("div",{className:"bx--grid"},Object(d.b)("div",{className:"bx--row"},Object(d.b)("div",{className:"bx--col-lg-12"},Object(d.b)("h1",{id:"page-title",className:u.text},n)))))},h=n("UQWD"),O=n("BAC9"),j=function(e){var t=e.relativePagePath,n=e.repository,a=h.data.site.siteMetadata.repository,c=n||a,r=c.baseUrl,o=c.subDirectory,l=r+"/edit/"+c.branch+o+"/src/pages"+t;return r?Object(d.b)("div",{className:"bx--row "+O.row},Object(d.b)("div",{className:"bx--col"},Object(d.b)("a",{className:O.link,href:l},"Edit this page on GitHub"))):null},g=n("FCXl"),f=n("dI71"),y=n("Wbzz"),C=n("I8xM"),N=function(e){function t(){return e.apply(this,arguments)||this}return Object(f.a)(t,e),t.prototype.render=function(){var e=this.props,t=e.tabs,n=e.slug,a=n.split("/").filter(Boolean).slice(-1)[0],c=t.map((function(e){var t,c=l()(e,{lower:!0,strict:!0}),r=c===a,o=new RegExp(a+"/?(#.*)?$"),i=n.replace(o,c);return Object(d.b)("li",{key:e,className:p()((t={},t[C.selectedItem]=r,t),C.listItem)},Object(d.b)(y.Link,{className:C.link,to:""+i},e))}));return Object(d.b)("div",{className:C.tabsContainer},Object(d.b)("div",{className:"bx--grid"},Object(d.b)("div",{className:"bx--row"},Object(d.b)("div",{className:"bx--col-lg-12 bx--col-no-gutter"},Object(d.b)("nav",null,Object(d.b)("ul",{className:C.list},c))))))},t}(r.a.Component),v=n("MjG9");t.a=function(e){var t=e.pageContext,n=e.children,c=e.location,r=e.Title,o=t.frontmatter,b=void 0===o?{}:o,p=t.relativePagePath,u=t.titleType,h=b.tabs,O=b.title,f=b.theme,y=b.description,C=b.keywords,x=a.data.site.pathPrefix,w=x?c.pathname.replace(x,""):c.pathname,T=h?w.split("/").filter(Boolean).slice(-1)[0]||l()(h[0],{lower:!0}):"";return Object(d.b)(s.a,{tabs:h,homepage:!1,theme:f,pageTitle:O,pageDescription:y,pageKeywords:C,titleType:u},Object(d.b)(m,{title:r?Object(d.b)(r,null):O,label:"label",tabs:h}),h&&Object(d.b)(N,{slug:w,tabs:h,currentTab:T}),Object(d.b)(v.a,{padded:!0},n,Object(d.b)(j,{relativePagePath:p})),Object(d.b)(g.a,{pageContext:t,location:c,slug:w,tabs:h,currentTab:T}),Object(d.b)(i.a,null))}},BAC9:function(e,t,n){e.exports={bxTextTruncateEnd:"EditLink-module--bx--text-truncate--end--2pqje",bxTextTruncateFront:"EditLink-module--bx--text-truncate--front--3_lIE",link:"EditLink-module--link--1qzW3",row:"EditLink-module--row--1B9Gk"}},I8xM:function(e,t,n){e.exports={bxTextTruncateEnd:"PageTabs-module--bx--text-truncate--end--267NA",bxTextTruncateFront:"PageTabs-module--bx--text-truncate--front--3xEQF",tabsContainer:"PageTabs-module--tabs-container--8N4k0",list:"PageTabs-module--list--3eFQc",listItem:"PageTabs-module--list-item--nUmtD",link:"PageTabs-module--link--1mDJ1",selectedItem:"PageTabs-module--selected-item--YPVr3"}},LdXR:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return O}));var a=n("wx14"),c=n("zLVn"),r=(n("q1tI"),n("7ljp")),o=n("013z"),l=(n("qKvR"),{}),i=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(r.b)("div",t)}},s=i("InlineNotification"),b=i("Tabs"),p=i("Tab"),u=i("Row"),d=i("Column"),m={_frontmatter:l},h=o.a;function O(e){var t=e.components,n=Object(c.a)(e,["components"]);return Object(r.b)(h,Object(a.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",null,"What is CRC?"),Object(r.b)("p",null,"CodeReady Containers (CRC) is a minimal, preconfigured OpenShift 4.1 or newer cluster that is designed to run on your local workstation as a development environment for OpenShift.\nFor more information, see ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/code-ready/crc"}),"CodeReady Containers"),"."),Object(r.b)("p",null,"Similar to Minikube in concept, CRC provides a cloud like environment locally to create and deploy an OpenShift cluster for development and testing purposes."),Object(r.b)("p",null,"This page covers some common CRC operations, including deploying IBM® Cúram Social Program Management (SPM) to the CRC environment. You will use the helm charts produced in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/spm-kubernetes/deployment/hc_deployment"}),"Preparing Helm charts"),"."),Object(r.b)("p",null,"For a full getting started guide for CRC, see ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://access.redhat.com/documentation/en-us/red_hat_codeready_containers/1.8/html/getting_started_guide/index"}),"Getting Started Guide CodeReady Containers")),Object(r.b)("h3",null,"Minimum System requirements"),Object(r.b)("p",null,"CodeReady Containers system requirements can be found here: ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://code-ready.github.io/crc/#minimum-system-requirements_gsg"}),"CRC Minimum system requirements"),"."),Object(r.b)(s,{mdxType:"InlineNotification"},Object(r.b)("p",null,"There is a know CRC ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/code-ready/crc/issues/557"}),"issue")," with respect to resource usage. When deploying SPM on CRC our experience has shown that a minimum of 16GB will improve performance, however 32GB is optimal.")),Object(r.b)("h2",null,"Installing CRC"),Object(r.b)("p",null,"Create an account at ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.redhat.com/"}),"RedHat Cloud"),".\nCreate a ",Object(r.b)("inlineCode",{parentName:"p"},"$CRC_HOME")," folder to use for the purposes of the installation.\nDownload the installation archive from ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://cloud.redhat.com/openshift/install/crc/installer-provisioned"}),"latest release")," to ",Object(r.b)("inlineCode",{parentName:"p"},"$CRC_HOME")," and extract the archive.\nOn the same page, download your pull secret to ",Object(r.b)("inlineCode",{parentName:"p"},"$CRC_HOME"),". At the time of writing the ",Object(r.b)("inlineCode",{parentName:"p"},"latest release")," is ",Object(r.b)("inlineCode",{parentName:"p"},"1.13.0"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"tar -xvf crc-macos-amd64.tar.xz\n")),Object(r.b)(s,{mdxType:"InlineNotification"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Note:"),"  You have two options, add the binary to the ",Object(r.b)("inlineCode",{parentName:"p"},"PATH")," environment variable, or move it to ",Object(r.b)("inlineCode",{parentName:"p"},"/usr/local/bin/"),".")),Object(r.b)(b,{mdxType:"Tabs"},Object(r.b)(p,{label:"Add to the PATH",mdxType:"Tab"},Object(r.b)(u,{mdxType:"Row"},Object(r.b)(d,{mdxType:"Column"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"export PATH=$CRC_HOME/crc-macos-1.10.0-amd64:$PATH`\n"))))),Object(r.b)(p,{label:"/usr/bin/local ",mdxType:"Tab"},Object(r.b)(u,{mdxType:"Row"},Object(r.b)(d,{mdxType:"Column"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"mv $CRC_HOME/crc-macos-1.10.0-amd64/crc /usr/local/bin\n")))))),Object(r.b)("p",null,"Whichever option you choose, you should now have crc in your executable path, to test this run the following command:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"crc version\n")),Object(r.b)("p",null,"The output should be similar to the following:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"crc version: 1.10.0+9025021\nOpenShift version: 4.4.3 (embedded in binary)\n")),Object(r.b)("h2",null,"Setting up CRC"),Object(r.b)("p",null,"The first step is to configure the prerequisites for the OpenShift cluster, including taking control of your hosts and resolver files to provide access to the CRC cluster.\nTo do this run the following command, providing the workstation administrator password as required.\nThis procedure also creates the ~/.crc directory if it does not already exist."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"crc setup\n")),Object(r.b)("p",null,"Now that the basic configuration is complete, you need to edit the configuration to change the memory limit and add the path to the pull secret file downloaded previously."),Object(r.b)("p",null,"To change the memory limit, set the CPUs to 6, and add the path to the pull secret file downloaded previously. Run the following commands:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"crc config set memory 32768\ncrc config set cpus 6\ncrc config set pull-secret-file $CRC_HOME/pull-secret.txt\n")),Object(r.b)(s,{mdxType:"InlineNotification"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Note:"),"  While CRC’s minimum memory allocation requirement is 8GB, only a single replica SPM deployment can be achieved using this."),Object(r.b)("p",null,"You should allocate as many resources as are available."),Object(r.b)("p",null,"The greater the workload the greater the memory and processor requirements."),Object(r.b)("p",null,"Any changes to the crc config require you to delete the cluster and start a new one.")),Object(r.b)("p",null,"You can always check the configured options of ’crc’, run the following command:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"crc config view\n")),Object(r.b)("p",null,"After setup is complete, start the cluster with 6 CPUs, run the following command:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"crc start\n")),Object(r.b)("p",null,"This outputs something similar to the following:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'level=info msg="Checking if oc binary is cached"\n...\n...\n...\nlevel=info msg="To access the cluster, first set up your environment by following \'crc oc-env\' instructions"\nlevel=info msg="Then you can access it by running \'oc login -u developer -p developer https://api.crc.testing:6443\'"\nlevel=info msg="To login as an admin, run \'oc login -u kubeadmin -p YourPassWordHere https://api.crc.testing:6443\'"\n...\n...\n')),Object(r.b)("p",null,"Note the ",Object(r.b)("inlineCode",{parentName:"p"},"kubeadmin")," and ",Object(r.b)("inlineCode",{parentName:"p"},"developer")," credentials for later use."),Object(r.b)(s,{mdxType:"InlineNotification"},Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Note:"),"  For the rest of the guide you can substitute the credentials you received when you started your cluster for ",Object(r.b)("inlineCode",{parentName:"p"},"$KUBEADMN_PSWD")," and ",Object(r.b)("inlineCode",{parentName:"p"},"$KUBEDEVEL_PSWD"),"."),Object(r.b)("p",null,"Alternatively, these credentials are returned by the ",Object(r.b)("inlineCode",{parentName:"p"},"crc console --credentials")," command.\nThis guide uses ",Object(r.b)("inlineCode",{parentName:"p"},"$KUBEDEVEL_PSWD")," and ",Object(r.b)("inlineCode",{parentName:"p"},"$KUBEADMN_PSWD")," environment variables."),Object(r.b)("p",null,"You may find it convenient to to the same, so you can copy and paste commands without having to switch values:"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"export KUBEADMN_PSWD=yourKubeAdminPassword")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"export KUBEDEVEL_PSWD=yourKubeDeveloperPassword"))),Object(r.b)("p",null,"Next, set up the OpenShift Client ",Object(r.b)("inlineCode",{parentName:"p"},"oc"),", which is used to administer the CRC cluster:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"crc oc-env\neval $(crc oc-env)\n")),Object(r.b)("p",null,"If required you can stop the cluster:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"crc stop\n")),Object(r.b)("p",null,"Or delete the cluster:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"crc delete\n")),Object(r.b)("h2",null,"Creating a CRC project"),Object(r.b)("p",null,"Create a project for the SPM deployment, again use an environment variable for your convenience when following the guide."),Object(r.b)("p",null,"Create the environment variable, you can set to value to anything you like, but it should consist of lower case alphanumeric characters or ",Object(r.b)("inlineCode",{parentName:"p"},"-"),", and must start and end with an alphanumeric character (e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"my-name"),",  or ",Object(r.b)("inlineCode",{parentName:"p"},"123-abc"),"):"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),'export PROJECT="ocp"\n')),Object(r.b)("p",null,"Log in as kubeadmin:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"oc login -u kubeadmin -p $KUBEADMN_PSWD https://api.crc.testing:6443\n")),Object(r.b)("p",null,"Create the project:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"oc adm new-project $PROJECT\n")),Object(r.b)("p",null,"Switch kubernetes context to the new project:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"kubectl config set-context --current --namespace $PROJECT\n")),Object(r.b)("h2",null,"Deployment Process"),Object(r.b)("p",null,"Enable the Image Registry default route:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),'oc patch configs.imageregistry.operator.openshift.io/cluster --type merge -p \'{"spec":{"defaultRoute":true}}\'\n\n')),Object(r.b)("p",null,"Add relevant roles to user:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"oc adm policy add-cluster-role-to-user registry-viewer kube:admin\n")),Object(r.b)("p",null,"Log in to the OpenShift registry:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"docker login -u kubeadmin -p $(oc whoami -t) $(oc registry info --public)\n")),Object(r.b)(s,{mdxType:"InlineNotification"},Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"oc registry info --public")," should return a URL like ",Object(r.b)("inlineCode",{parentName:"p"},"default-route-openshift-image-registry.apps-crc.testing")," which is used for publishing images into the internal image registry."),Object(r.b)("p",null,"The image registry URL for use in Helm override values can be retrieved using ",Object(r.b)("inlineCode",{parentName:"p"},"oc registry info --internal"),": ",Object(r.b)("inlineCode",{parentName:"p"},"image-registry.openshift-image-registry.svc:5000"))),Object(r.b)("h2",null,"Hostname configuration for CRC"),Object(r.b)("p",null,"This runbook uses a generic hostname of ",Object(r.b)("inlineCode",{parentName:"p"},"spm-ocp.apps-crc.testing")," as an example in commands and the configuration files.\nYou should add the CRC IP address to the ",Object(r.b)("inlineCode",{parentName:"p"},"hosts")," file by using the generic hostname, or else modify the usage of ",Object(r.b)("inlineCode",{parentName:"p"},"spm-ocp.apps-crc.testing")," in this runbook to reflect your local hostname."),Object(r.b)(b,{mdxType:"Tabs"},Object(r.b)(p,{label:"Mac/Linux",mdxType:"Tab"},Object(r.b)(u,{mdxType:"Row"},Object(r.b)(d,{mdxType:"Column"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),'echo -e "$(crc ip)\\tspm-ocp.apps-crc.testing" | sudo tee -a /etc/hosts\n'))))),Object(r.b)(p,{label:"Windows",mdxType:"Tab"},Object(r.b)(u,{mdxType:"Row"},Object(r.b)(d,{mdxType:"Column"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-powershell"}),'Add-Content -Path C:\\Windows\\System32\\drivers\\etc\\hosts -Value "$(crc ip)\\tspm-ocp.apps-crc.testing" -Force\n')))))),Object(r.b)("p",null,"Where ",Object(r.b)("inlineCode",{parentName:"p"},"crc ip")," is the command that returns the CRC VM’s IP address that is accessible from your workstation."))}O.isMDXComponent=!0},QH2O:function(e,t,n){e.exports={bxTextTruncateEnd:"PageHeader-module--bx--text-truncate--end--mZWeX",bxTextTruncateFront:"PageHeader-module--bx--text-truncate--front--3zvrI",pageHeader:"PageHeader-module--page-header--3hIan",withTabs:"PageHeader-module--with-tabs--3nKxA",text:"PageHeader-module--text--o9LFq"}},UQWD:function(e){e.exports=JSON.parse('{"data":{"site":{"siteMetadata":{"repository":{"baseUrl":"","subDirectory":"","branch":"master"}}}}}')},WcmB:function(e){e.exports=JSON.parse('{"data":{"site":{"pathPrefix":"/spm-kubernetes"}}}')}}]);
//# sourceMappingURL=component---src-pages-prereq-openshift-codeready-containers-mdx-aef5ccdc983366b1ee7d.js.map